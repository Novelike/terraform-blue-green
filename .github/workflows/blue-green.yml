# .github/workflows/blue-green.yml
name: Blue-Green Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy & Switch
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    env:
      TF_VAR_username:     ${{ secrets.TF_VAR_USERNAME }}
      TF_VAR_password:     ${{ secrets.TF_VAR_PASSWORD }}
      TF_VAR_tenant_name:  ${{ secrets.TF_VAR_TENANT_NAME }}
      TF_VAR_region:       ${{ secrets.TF_VAR_REGION }}
      SSH_KEY:             ${{ secrets.SSH_KEY }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Refresh (ignore errors)
        working-directory: terraform
        run: terraform refresh || true

      - name: Determine Active & Next Env
        id: determine
        working-directory: terraform
        run: |
          set +e
          RAW=$(terraform output -raw lb_vip 2>/dev/null)
          VIP=$(echo "$RAW" | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}')
          if [[ -z "$VIP" ]]; then
            echo "::warning::Could not parse lb_vip; defaulting to blue"
            echo "NEXT_ENV=blue" >> $GITHUB_ENV
            exit 0
          fi
          echo "LB_VIP=$VIP" >> $GITHUB_ENV
          if curl -fs http://$VIP/hello; then
            echo "NEXT_ENV=green" >> $GITHUB_ENV
          else
            echo "NEXT_ENV=blue"  >> $GITHUB_ENV
          fi
          set -e

      - name: Get Instance IPs
        working-directory: terraform
        run: |
          set +e
          RAW_BLUE=$(terraform output -raw blue_ip 2>/dev/null)
          RAW_GREEN=$(terraform output -raw green_ip 2>/dev/null)
          # try to extract IPv4, or fall back to raw if grep fails
          BLUE_IP=$(echo "$RAW_BLUE" | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}') || BLUE_IP="$RAW_BLUE"
          GREEN_IP=$(echo "$RAW_GREEN" | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}') || GREEN_IP="$RAW_GREEN"
          echo "BLUE_IP=$BLUE_IP"   >> $GITHUB_ENV
          echo "GREEN_IP=$GREEN_IP" >> $GITHUB_ENV
          set -e

      - name: Deploy to Blue
        if: env.NEXT_ENV == 'blue'
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.BLUE_IP }}
          username: ubuntu
          key: ${{ env.SSH_KEY }}
          script: |
            cd /opt/app
            git pull
            . venv/bin/activate
            pip install -r requirements.txt
            echo "$(date)" > /opt/deploy_timestamp.txt
            pkill -f "uvicorn app.main"
            nohup uvicorn app.main:app --host 0.0.0.0 --port 8000 &

      - name: Deploy to Green
        if: env.NEXT_ENV == 'green'
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.GREEN_IP }}
          username: ubuntu
          key: ${{ env.SSH_KEY }}
          script: |
            cd /opt/app
            git pull
            . venv/bin/activate
            pip install -r requirements.txt
            echo "$(date)" > /opt/deploy_timestamp.txt
            pkill -f "uvicorn app.main"
            nohup uvicorn app.main:app --host 0.0.0.0 --port 8000 &

      - name: Health Check
        run: |
          for i in {1..5}; do
            if curl -fs http://${{ env.LB_VIP }}/hello; then
              exit 0
            fi
            sleep 5
          done
          echo "::error::Health check failed" && exit 1

      - name: Switch Traffic
        if: success()
        working-directory: terraform
        run: terraform apply -auto-approve -var="active_env=${{ env.NEXT_ENV }}"

      - name: Notify Discord
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            MSG="âœ… Deployment to **${{ env.NEXT_ENV }}** succeeded!\nLB VIP: ${{ env.LB_VIP }}"
          else
            MSG="ðŸš¨ Deployment to **${{ env.NEXT_ENV }}** failed! Check logs."
          fi
          curl -H "Content-Type: application/json" \
               -d "{\"content\":\"$MSG\"}" \
               ${{ env.DISCORD_WEBHOOK_URL }}

