# .github/workflows/blue-green-combined.yml
name: Terraform + Blue-Green Deploy

on:
  push:
    branches: [ main ]

jobs:
  provision_and_deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    env:
      TF_VAR_username:    ${{ secrets.TF_VAR_USERNAME }}
      TF_VAR_password:    ${{ secrets.TF_VAR_PASSWORD }}
      TF_VAR_tenant_name: ${{ secrets.TF_VAR_TENANT_NAME }}
      TF_VAR_region:      ${{ secrets.TF_VAR_REGION }}
      SSH_KEY:            ${{ secrets.SSH_KEY }}
      DISCORD_WEBHOOK_URL:${{ secrets.DISCORD_WEBHOOK_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # 1) Infra: Init â†’ Plan â†’ Apply
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # 2) Determine Active & Next Env
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Determine Active & Next Env
        id: determine
        working-directory: terraform
        run: |
          set +e
          RAW=$(terraform output -raw lb_vip 2>/dev/null)
          VIP=$(echo "$RAW" | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}')
          if [[ -z "$VIP" ]]; then
            echo "::warning::Could not parse lb_vip; defaulting to blue"
            echo "NEXT_ENV=blue" >> $GITHUB_ENV
          else
            echo "LB_VIP=$VIP" >> $GITHUB_ENV
            if curl -fs http://$VIP/hello; then
              echo "NEXT_ENV=green" >> $GITHUB_ENV
            else
              echo "NEXT_ENV=blue"  >> $GITHUB_ENV
            fi
          fi
          set -e

      - name: Get Instance IPs
        working-directory: terraform
        run: |
          BLUE=$(terraform output -raw blue_ip)
          GREEN=$(terraform output -raw green_ip)
          echo "BLUE_IP=$BLUE"   >> $GITHUB_ENV
          echo "GREEN_IP=$GREEN" >> $GITHUB_ENV

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # 3) Deploy to Next Env
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Deploy to Blue
        if: env.NEXT_ENV == 'blue'
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.BLUE_IP }}
          username: ubuntu
          key: ${{ env.SSH_KEY }}
          script: |
            cd /opt/app; git pull; . venv/bin/activate; pip install -r requirements.txt
            echo "$(date)" >/opt/deploy_timestamp.txt
            pkill -f uvicorn; nohup uvicorn app.main:app --host 0.0.0.0 --port 8000 &

      - name: Deploy to Green
        if: env.NEXT_ENV == 'green'
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.GREEN_IP }}
          username: ubuntu
          key: ${{ env.SSH_KEY }}
          script: |
            cd /opt/app; git pull; . venv/bin/activate; pip install -r requirements.txt
            echo "$(date)" >/opt/deploy_timestamp.txt
            pkill -f uvicorn; nohup uvicorn app.main:app --host 0.0.0.0 --port 8000 &

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # 4) Health Check & Switch Traffic
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Health Check
        run: |
          for i in {1..5}; do
            if curl -fs http://${{ env.LB_VIP }}/hello; then exit 0; fi
            sleep 5
          done
          exit 1

      - name: Switch Traffic
        if: success()
        working-directory: terraform
        run: terraform apply -auto-approve -var="active_env=${{ env.NEXT_ENV }}"

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # 5) Notify Discord
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Notify Discord
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            MSG="âœ… Deployed to **${{ env.NEXT_ENV }}** âœ“\nLB VIP: ${{ env.LB_VIP }}"
          else
            MSG="ðŸš¨ Deploy to **${{ env.NEXT_ENV }}** failed!"
          fi
          curl -H "Content-Type: application/json" \
               -d "{\"content\":\"$MSG\"}" \
               ${{ env.DISCORD_WEBHOOK_URL }}

